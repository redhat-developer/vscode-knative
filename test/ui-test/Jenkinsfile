#!/usr/bin/env groovy

timeout(time: 90, unit: 'MINUTES') {
  node('rhel8-24gb'){
    stage('Checkout repo') {
      deleteDir()
      dir('vscode-knative') {
        git url: "https://github.com/${FORK}/vscode-knative.git",
          branch: "${BRANCH}"
      }
      dir('cdk-scripts') {
        git url: 'https://github.com/odockal/cdk-scripts.git',
          branch: "master"
      }
    }
    stage ('Set up cluster') {
        if (env.CLUSTER_CHOICE == 'kubeconfig') {
            // Uses kubeconfig passed as string parameter,
            // it is saved as kubeconfig at user's home directory
            // KUBECONFIG env. variable is set pointing to this file
            stage('Setting up KUBECONFIG') {
                writeFile(file: "${env.WORKSPACE}/kubeconfig", text: "${env.KUBECONFIG_CONTENT}", encoding: "UTF-8")
                env.KUBECONFIG = "${env.WORKSPACE}/kubeconfig"
                sh "echo ${KUBECONFIG}"
            }
        } else if (env.CLUSTER_CHOICE == 'credentials') {
            // Requires CLUSTER_URL, USERNAME and PASSWORD
            // Downloads and extracts OC/OKD
            // login into cluster using given variables
            stage('Connecting to the cluster using OKD') {
                sh """
                    okd_url="https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/openshift-client-linux.tar.gz"
                    mkdir -p oc_dir
                    wget \${okd_url} -O oc_dir/oc.tar.gz
                    cd oc_dir
                    tar -xvzf oc.tar.gz
                    ./oc login \${CLUSTER_URL} -u \${CLUSTER_USER} -p \${CLUSTER_PASSWORD} --insecure-skip-tls-verify
                """
            }
        } else if (env.CLUSTER_CHOICE == 'crc') {
            // Downloads, start and configures local cluster using CRC
            stage('CRC Cluster preparation') {
                stage('Setup CRC environment') {
                    sh '${WORKSPACE}/vscode-knative/test/ui-test/scripts/prepare-env.sh'
                }

                stage('Download and Setup CRC') {
                    timeout(time: 15, unit: 'MINUTES') {
                        withCredentials([string(credentialsId: 'crc-pull-secret', variable: 'PULL_SECRET')]){
                            writeFile(file: "${env.WORKSPACE}/crc-pull-secret.txt", text: "${env.PULL_SECRET}", encoding: "UTF-8")
                            env.CRC_PULL_SECRET = "${env.WORKSPACE}/crc-pull-secret.txt"
                            sh '${WORKSPACE}/vscode-knative/test/ui-test/scripts/setup-crc.sh'
                        }
                    }
                }

                stage('Run CRC and install Serverless operator, setup KNative on the cluster') {
                    timeout(time: 45, unit: 'MINUTES') {
                        sh '${WORKSPACE}/vscode-knative/test/ui-test/scripts/run-crc.sh'
                    }
                }
            }
        }
    }

    stage('Install requirements') {
      def nodeHome = tool 'nodejs-lts'
      env.PATH="${env.PATH}:${nodeHome}/bin"
      sh "npm install -g typescript vsce"
    }

    stage('Build') {
      dir('vscode-knative') {
        sh "npm install"
        sh "npm run build"
      }
    }

    stage('Test') {
      wrap([$class: 'Xvnc']) {
        dir('vscode-knative') {
          sh "npm test"
        }
      }
    }

    stage('UI Tests') {
      wrap([$class: 'Xvnc']) {
        dir('vscode-knative') {
          sh """
          if [ -f \$HOME/.vs-kn/kn ]; then
            rm \$HOME/.vs-kn/kn
          fi
          """
          try {
            sh "npm run ui-test"
          }
          finally {
            archiveArtifacts artifacts: '**/test-resources/*.log,**/test-resources/**/*.png'
          }
        }
      }
    }
  }
}
